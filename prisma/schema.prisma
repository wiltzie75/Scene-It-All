// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id          Int          @id @default(autoincrement())
  imdbId      String?
  title       String
  plot        String?      @db.Text
  poster      String?
  year        String?
  genre       String?
  imdbRating  Float?
  imdbVotes   String?
  userRatings UserRating[]
  reviews     Review[]
  userId      Int
  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites   Favorite[]
  watchlist   Watchlist[]
}

model Watchlist {
  id      Int   @id @default(autoincrement())
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id])
}

model Review {
  id          Int       @id @default(autoincrement())
  subject     String
  description String
  rating      Float?
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieId     Int
  movie       Movie     @relation(fields: [movieId], references: [id])
  comments    Comment[]
   @@unique([userId, movieId])
}

model Comment {
  id          Int     @id @default(autoincrement())
  subject     String?
  description String
  userId      Int
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId    Int
  review      Review  @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model User {
  id         Int          @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String       @unique
  password   String
  movies     Movie[]
  reviews    Review[]
  comments   Comment[]
  ratings    UserRating[]
  favorites  Favorite[]
  isAdmin    Boolean      @default(false)
  watchlists Watchlist[]
}

model UserRating {
  id      String  @id @default(uuid())
  score   Float
  review  String? @db.Text
  movie   Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId Int
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
  @@unique([userId, movieId])
}

model Favorite {
  id      Int   @id @default(autoincrement())
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id])
  @@unique([userId, movieId])
}


postgresql://movie_capstone_db_2qdj_user:7Aa5Q17fNnOozzP02iL9V2LZSQJX6bSr@dpg-d0r3ur2dbo4c73a0nksg-a/movie_capstone_db_2qdj