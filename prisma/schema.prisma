// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id Int @id @default(autoincrement())
  imdbId String?
  title String
  plot String? @db.Text
  poster String?
  year String?
  genre String?
  imdbRating Float?
  imdbVotes String?
  userRatings UserRating[]
  reviews Review[]
  userId Int
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites Favorite[]

}

model Review {
  id Int @id @default(autoincrement())
  subject String
  description String
  rating Float?
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  movieId Int
  movie Movie @relation(fields: [movieId], references: [id])
  comments Comment[]
}

model Comment {
  id Int @id @default(autoincrement())
  subject String?
  description String
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId Int
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model User {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  password String
  movies Movie[]
  reviews Review[]
  comments Comment[]
  ratings UserRating[]
  favorites Favorite[]
  isAdmin Boolean @default(false)
  
}

model UserRating {
  id        String   @id @default(uuid())
  score     Int
  review    String?  @db.Text
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@unique([userId, movieId])
}

model Favorite {
  id        String   @id @default(uuid())
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  @@unique([userId, movieId])
}

